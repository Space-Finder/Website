generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @unique @default(cuid())
  googleId    String  @unique @map("google_id")
  name        String
  email       String  @unique
  image       String?
  role        Role    @default(STUDENT)
  isOnboarded Boolean @default(false) @map("is_onboarded")
  isTeacher   Boolean @default(false) @map("is_teacher")

  teachers Teacher[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Teacher {
  id             String  @id @unique @default(cuid())
  code           String  @unique
  email          String  @unique
  isCommonLeader Boolean @default(false) @map("is_common_leader")

  userId   String? @unique @map("user_id")
  commonId String  @map("common_id")

  user        User?     @relation(fields: [userId], references: [id])
  common      Common    @relation(fields: [commonId], references: [id])
  courses     Course[]
  bookings    Booking[]
  fromTeacher Request[] @relation("fromTeacher")
  toTeacher   Request[] @relation("toTeacher")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teachers")
}

model Course {
  id   String @id @unique @default(cuid())
  code String
  name String
  line Int
  year Year

  teacherId String @map("teacher_id")
  commonId  String @map("common_id")

  teacher  Teacher   @relation(fields: [teacherId], references: [id])
  common   Common    @relation(fields: [commonId], references: [id])
  bookings Booking[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

model Common {
  id             String @id @unique @default(cuid())
  name           String @unique
  primaryColor   String @map("primary_color")
  secondaryColor String @map("secondary_color")

  teachers Teacher[]
  courses  Course[]
  spaces   Space[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("commons")
}

model Space {
  id   String @id @unique @default(cuid())
  name String

  commonId String? @map("common_id")

  common   Common?   @relation(fields: [commonId], references: [id])
  bookings Booking[]
  Request  Request[]

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("spaces")
}

model Period {
  id           String     @id @unique @default(cuid())
  startTime    String     @map("start_time")
  endTime      String     @map("end_time")
  periodType   PeriodType @map("period_type")
  periodNumber Int?       @map("period_number")
  name         String?
  line         Int?

  dayTimetables DayTimetable[] @relation("DayTimetablePeriods")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("periods")
}

model DayTimetable {
  id      String   @id @unique @default(cuid())
  name    String   @unique
  periods Period[] @relation("DayTimetablePeriods")

  mondayOf    WeekTimetable[] @relation("MondayRelation")
  tuesdayOf   WeekTimetable[] @relation("TuesdayRelation")
  wednesdayOf WeekTimetable[] @relation("WednesdayRelation")
  thursdayOf  WeekTimetable[] @relation("ThursdayRelation")
  fridayOf    WeekTimetable[] @relation("FridayRelation")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("day_timetables")
}

model WeekTimetable {
  id      String  @id @unique @default(cuid())
  name    String  @unique
  default Boolean @default(false)

  mondayId    String @map("monday_id")
  tuesdayId   String @map("tuesday_id")
  wednesdayId String @map("wednesday_id")
  thursdayId  String @map("thursday_id")
  fridayId    String @map("friday_id")

  monday    DayTimetable @relation("MondayRelation", fields: [mondayId], references: [id], onDelete: Cascade)
  tuesday   DayTimetable @relation("TuesdayRelation", fields: [tuesdayId], references: [id], onDelete: Cascade)
  wednesday DayTimetable @relation("WednesdayRelation", fields: [wednesdayId], references: [id], onDelete: Cascade)
  thursday  DayTimetable @relation("ThursdayRelation", fields: [thursdayId], references: [id], onDelete: Cascade)
  friday    DayTimetable @relation("FridayRelation", fields: [fridayId], references: [id], onDelete: Cascade)

  weeks Week[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("week_timetables")
}

model Week {
  id        String @id @unique @default(cuid())
  number    Int
  year      Int // what year it is eg 2023, 2024 etc
  yearGroup Year   @map("year_group") // what actual year group this corresponds to eg year 11 or year 12

  weekTimetableId String?        @map("week_timetable_id")
  weekTimetable   WeekTimetable? @relation(fields: [weekTimetableId], references: [id])
  bookings        Booking[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("weeks")
}

model Booking {
  id           String @id @unique @default(cuid())
  periodNumber Int    @map("period_number")

  weekId    String @map("week_id")
  spaceId   String @map("space_id")
  courseId  String @map("course_id")
  teacherId String @map("teacher_id")

  space   Space   @relation(fields: [spaceId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])
  week    Week    @relation(fields: [weekId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("bookings")
}

model Term {
  id        String   @id @default(cuid())
  number    Int
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  year      Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("terms")
}

model Request {
  id           String        @id @default(cuid())
  week         Int
  line         Int
  periodNumber Int           @map("period_number")
  status       RequestStatus @default(PENDING)
  space        Space         @relation(fields: [spaceId], references: [id])

  fromTeacherId String @map("from_teacher_id")
  toTeacherId   String @map("to_teacher_id")
  spaceId       String @map("space_id")

  fromTeacher Teacher @relation("fromTeacher", fields: [fromTeacherId], references: [id])
  toTeacher   Teacher @relation("toTeacher", fields: [toTeacherId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("requests")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DENIED
}

enum PeriodType {
  CLASS
  BREAK
  LA
  CUSTOM
}

enum Role {
  STUDENT
  TEACHER
  LEADER
  ADMIN
}

enum Year {
  Y11
  Y12
  Y13
}
